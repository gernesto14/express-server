#!/usr/bin/env node

import app from "../app.js";
import debugModule from "debug";
import http from "http";
// import dotenv from "dotenv";

console.log("Starting server...");
// dotenv.config();
const debug = debugModule("backend:server");

// Normalize port/host
const host = process.env.HOST || "0.0.0.0";
const port = normalizePort(process.env.PORT);
app.set("port", port);

// Create HTTP server
const server = http.createServer(app);

// Start server
server.listen(port, host);
server.on("error", onError);
server.on("listening", onListening);

// Normalize port
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

// Error handler
function onError(error) {
  if (error.syscall !== "listen") throw error;

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
    case "EADDRINUSE":
      console.error(`${bind} is already in use`);
      process.exit(1);
    default:
      throw error;
  }
}

// Listening log
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
  debug("Listening on " + bind);
  console.log("ðŸš€ Server is listening on " + bind);
}

// Export for tests or Socket.IO
export default server;
